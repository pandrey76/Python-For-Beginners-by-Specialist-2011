#!/usr/bin/env python
#! -*- coding: utf-8 -*-

#создаем функцию определения максимального элемента масива
###################################################
def select_max ( List, less ) :
    if len(List) <= 0 : return None
    if len(List) == 1 : return List[0]
    Result = List[0]
##########################
#Можно было бы написать и так

#   for K in List : 
#   вместо
#   for K in List[1:] :

#Но это не очень хорошо так как мы лишний раз вызываем функцию
#сравнения элементов списка, а она может быть очень тяжеловесной
##########################
    for K in List[1:] :
        if less( result, K ) :
            Result = K
    return Result
###################################################

A = [ 1, 23, u"Vasya", 34 ]
B = [ 34, u"Petya" ]
if 1 in A :
    print u"OK"
else :
    print u"no"

if 1 not in A :
    print u"OK"
else :
    print u"no"
    
#Сцепление списков
print A + B    
#Операция "in" и "сцепление списков" доступно кортежам
#Операция повторения списка
print 5*B
#Выделение элемента из списка
print A[2]

#Для интервалов существует общее правило, первое значение 
#интервала учитывается, последнее нет.
#если в индексных скобка присутствует ":", то опреация получения
#элемента по индексу вернет список
#Вырезка 
print A[1:3]    #результат [23, u"Vasya"]
#Получаем список содержащий элементы с первого до конца
print A[1:]     #результат [23, u"Vasya", 34]
#Получаем список содержащий элементы с нулевого до втрого включительно
print A[:3]     #результат [1, 23, u"Vasya"]
#Последний элемент списка имеет индекс -1
#Получаем список содержащий два последних элемента списка
print A[-2:]    #результат [u"Vasya", 34] 
#Получаем значение длины списка
print len(A)    #результат 4

###################################################
#Данные функции лучше не использовать в таком виде
#Для их корректной работы необходимо передавать дополнительный параметр
#key - функция сортировки списка по определенному критерию
#Получаем минимальны элемент списка
print min(A)    #результат 1
#Получаем максимальныйэлемент списка
print max(A)    #результат Vasya
###################################################

#Все выше описанные функции работы со списком доступны
#и кортежам и строкам
#Функции доступные только спискам

#Удаление элемента с индексом 1 из списка А
del A[1]
print A    #результат [1, u"Vasya", 34] 
#Удаление диапазона элементов
del A[1:3]
print A    #результат [1] 
#Добавление элемент в конец списка
A.append(35)
print A    #результат [1, 2] 
#Удаление элемента из конца списка
A.pop()
print A    #результат [1] 
A.append(35)
#Номер позиции где находится элемент
print A.index(35) #практически не используется

#Удаление элемента с указанным значением с лева  на право
#и только удаляется одно значение, а не все совпавшие
A.remove (35) #Функция достаточно востребована
print A

A.append(34)
A.append(33)
A.append(32)
A.append(31)
A.append(30)
print A

#Общее правило: в диапазоне первый (2) учитывается, последний (6) нет, т.е. до 5 элемента включительно
print A.index(33, 2, 6) #практически не используется, результат 2 

#функция определяющая количество вхождений значения в списке
print A.count(30)       #результат 1
print (5*A).count (30)  #результат 5

A1 = [ 9, 11, 219, 0 ]

#Функция сортировки списка
#Функция не создаёт новый список а изменяет его
#В таком виде функция изменяет список по своему встроеному критерию
A1.sort ( ) #результат [0, 9, 11, 219]
print A1

#В функцию sort можно передать функцию сортировки, которая принемает два параметра 
#и возвращает истину если её первый параметр меньше чем второй
#A1.sort( cmp )
A1.sort( lambda x, y : unicode(x) < unicode(y) )
print A1 

#Функция reverse переписывает список задом на перед изменяя сам список
A1.reverse()
print A1   #результат [219, 11, 9, 0] 