#!/usr/bin/env python
#! -*- codding: utf-8 -*-

#Цикл
A = [ 1, 3.0, 4, u"Vasya", u"Pupkin" ]
for X in A :
    print X, type(X)

#Генератор функция
#Малопрактичный способ использования
####################################
def genA( ) :
    yield 1
    yield 3.0
    yield 4
    yield u"Vasya"
    yield u"Pupkin"
    
for X in genA() :
    print X, type(X)
####################################
#отображаем простые числа
####################################
#Проверяем, является ли число простым
def isSimple( X ) :
    for K in range( 2, X/2 ) :
        if X % K == 0 :
            return False
        return True
#Генератор функция выводящая простые числа
# от 2 до заданного числа    

#Неправильный вариант генератора-функции, т.к. при первом 
#вызове функции Simple, функцией range будет сформировани список
# от 2 до N, который будет хранится в памяти.

#def Simple (N) :
#    for K in range( 2, N ) :
#        if isSimple(K) :
#            yield K

#Генератор-функцию надо писать так, чтобы список не хранился в памяти 
#В данном случае список тоже формируется в функции isSimple, но этот список 
#живёт пока работает функция isSimple.
def Simple ( N ) :
    K = 2
    while K < N :
        if isSimple(K) == True :
            yield K
        K += 1
    
for X in Simple(50) :
    print X
####################################

